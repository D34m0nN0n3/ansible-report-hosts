---
- name: Get OS release
  debug:
    msg: "{{ ansible_distribution }} {{ ansible_distribution_version }}"

- name: Exist volume group SystemData
  set_fact:
    vg_systemdata: "{{ item.value.size_g }}"
    cacheable: no
  when: (item.key  == "VG_SystemData" and item.value.size_g >= "15")
  with_dict: "{{ ansible_lvm.vgs }}"
  delegate_facts: True

- name: Exist volume group SystemData
  set_fact:
    vg_software: "{{ item.value.size_g }}"
    cacheable: no
  when: (item.key  == "VG_SoftWare" and item.value.size_g >= "15")
  with_dict: "{{ ansible_lvm.vgs }}"
  delegate_facts: True

- name: Exist volume group SystemData
  set_fact:
    vg_otherdata: "{{ item.value.size_g }}"
    cacheable: no
  when: (item.key  == "VG_OtherData" and item.value.size_g >= "15")
  with_dict: "{{ ansible_lvm.vgs }}"
  delegate_facts: True

- name: Read anaconda kickstart
  set_fact:
    anaconda_kickstart: "{{ lookup('file', '/root/anaconda-ks.cfg') }}"
    cacheable: no
  delegate_facts: True

- name: Disk layout anaconda kickstart
  set_fact:
    ks_cfg_disk: "{{ anaconda_kickstart | regex_search('\\W\\sGet\\sDisk\\ssize\\sinformation\\s\\/dev\\/sd.') }}"
    cacheable: no
  delegate_facts: True

- name: Configuration network anaconda kickstart
  set_fact:
    ks_cfg_network: "{{ anaconda_kickstart | regex_search('\\s*\\w{4}\\s-p\\s\\WPlease enter domain suffix \\(rzd or gvc\\.oao\\.rzd\\)\\W\\s\\W') }}"
    cacheable: no
  delegate_facts: True

- name: Modify bashrc anaconda kickstart
  set_fact:
    ks_cfg_bash: "{{ anaconda_kickstart | regex_search('\\W\\sModify\\sglobal\\sbashrc') }}"
    cacheable: no
  delegate_facts: True

- name: Read chrony config
  set_fact:
    chrony_config: "{{ lookup('file', '/etc/chrony.conf') }}"
    cacheable: no
  delegate_facts: True

- name: Configuration Chrony
  set_fact:
    ntp_servers: "{{ chrony_config | regex_findall ('server\\s10.\\d{1,3}.\\d{1,3}.\\d{1,3}\\siburst') }}"
    cacheable: no
  delegate_facts: True

- name: Get users info
  slurp:
    src: /etc/passwd
  register: users

- name: Check adminos
  set_fact:
    adminos_usr: "{{ users['content'] | b64decode | regex_search('adminos') }}"
    cacheable: no
  delegate_facts: True

- name: Check adminptk
  set_fact:
    adminptk_usr: "{{ users['content'] | b64decode | regex_search('adminptk') }}"
    cacheable: no
  delegate_facts: True

- name: Check smenaptk
  set_fact:
    smenaptk_usr: "{{ users['content'] | b64decode | regex_search('smenaptk') }}"
    cacheable: no
  delegate_facts: True

- name: Check adminvp0
  set_fact:
    adminvp0_usr: "{{ users['content'] | b64decode | regex_search('adminvp0') }}"
    cacheable: no
  delegate_facts: True

- name: Check if sudoers rules exists
  stat: path="/etc/sudoers.d/adminvp-smena"
  register: sudoers_rules_status

- name: Get sshd config
  slurp:
    src: /etc/ssh/sshd_config
  register: sshd_config

- name: Check access deny for smenaptk from vipnet
  set_fact:
    sshd_deny_smenaptk: "{{ sshd_config['content'] | b64decode | regex_search('.*smenaptk@10.(?:144|160).*') }}"
    cacheable: no
  delegate_facts: True

- name: Check if ITM agent exists
  stat: path="/opt/IBM/ITM/bin/itmcmd"
  register: itm_status

- name: Get ITM agent running processes
  shell: "ps -ef | grep -v grep | grep -w  klzagent | awk '{print $2}'"
  register: itm_running_processes

- name: Check if Netbackup agent exists
  stat: path="/usr/openv/netbackup/bin/vnetd"
  register: vnet_status

- name: Get Netbackup agent running processes
  shell: "ps -ef | grep -v grep | grep -w  vnetd | awk '{print $2}'"
  register: vnet_running_processes
...
